# ohmpi integration test
import time
from ohmpi.ohmpi import OhmPi
k = OhmPi()
k.update_settings("{'nb_electrodes': 16}")
k.test()
#k.test_mux(activation_time=0.1))
k.create_sequence(16, params=[('dpdp', 1, 8)])
k.create_sequence(16, params=[('schlum', 1, 8)])
k.create_sequence(16, params=[('multigrad', 1, 8, 2)])
k.create_sequence(16, params=[('wenner', 2)])
k.load_sequence('../sequences/ABMN.txt')
k.remove_data()
k.rs_check()
k.run_measurement([1, 4, 2, 3], nb_stack=1, injection_duration=0.2, duty_cycle=1)
k.run_measurement([1, 4, 2, 3], nb_stack=2, injection_duration=0.2, duty_cycle=0.5, strategy='vmax')
k.run_measurement([1, 4, 2, 3], nb_stack=1, injection_duration=0.2, duty_cycle=0.5, strategy='vmin', vmn_req=0.02)
k.run_measurement([1, 4, 2, 3], nb_stack=1, injection_duration=0.2, duty_cycle=0.5, strategy='constant', vab_req=6)
k.run_measurement([1, 4, 2, 3], nb_stack=1, injection_duration=0.2, duty_cycle=0.5, strategy='full_constant', vab_req=6)
k.plot_last_fw()
k.get_data()
k.run_multiple_sequences(sequence_delay=60, nb_meas=2)
#k.run_inversion()
k.download_data(ftype='ohmpi')
k.download_data(ftype='pygimli')
k.download_data(ftype='protocol')
k.run_sequence_async()
time.sleep(5)
k.interrupt()
k.remove_logs()
k.find_optimal_vab_for_sequence()
